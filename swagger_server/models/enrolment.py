# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Enrolment(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, survey_id: str=None, status: str=None):
        """
        Enrolment - a model defined in Swagger

        :param survey_id: The survey_id of this Enrolment.
        :type survey_id: str
        :param status: The status of this Enrolment.
        :type status: str
        """
        self.swagger_types = {
            'survey_id': str,
            'status': str
        }

        self.attribute_map = {
            'survey_id': 'surveyId',
            'status': 'status'
        }

        self._survey_id = survey_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Enrolment':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The enrolment of this Enrolment.
        :rtype: Enrolment
        """
        return deserialize_model(dikt, cls)

    @property
    def survey_id(self) -> str:
        """
        Gets the survey_id of this Enrolment.

        :return: The survey_id of this Enrolment.
        :rtype: str
        """
        return self._survey_id

    @survey_id.setter
    def survey_id(self, survey_id: str):
        """
        Sets the survey_id of this Enrolment.

        :param survey_id: The survey_id of this Enrolment.
        :type survey_id: str
        """

        self._survey_id = survey_id

    @property
    def status(self) -> str:
        """
        Gets the status of this Enrolment.

        :return: The status of this Enrolment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """
        Sets the status of this Enrolment.

        :param status: The status of this Enrolment.
        :type status: str
        """
        allowed_values = ["PENDING", "ENABLED", "DISABLED", "SUSPENDED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

