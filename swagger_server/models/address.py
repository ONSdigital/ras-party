# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Address(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, saon: str=None, paon: str=None, street: str=None, locality: str=None, town: str=None, postcode: str=None):
        """
        Address - a model defined in Swagger

        :param saon: The saon of this Address.
        :type saon: str
        :param paon: The paon of this Address.
        :type paon: str
        :param street: The street of this Address.
        :type street: str
        :param locality: The locality of this Address.
        :type locality: str
        :param town: The town of this Address.
        :type town: str
        :param postcode: The postcode of this Address.
        :type postcode: str
        """
        self.swagger_types = {
            'saon': str,
            'paon': str,
            'street': str,
            'locality': str,
            'town': str,
            'postcode': str
        }

        self.attribute_map = {
            'saon': 'saon',
            'paon': 'paon',
            'street': 'street',
            'locality': 'locality',
            'town': 'town',
            'postcode': 'postcode'
        }

        self._saon = saon
        self._paon = paon
        self._street = street
        self._locality = locality
        self._town = town
        self._postcode = postcode

    @classmethod
    def from_dict(cls, dikt) -> 'Address':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The address of this Address.
        :rtype: Address
        """
        return deserialize_model(dikt, cls)

    @property
    def saon(self) -> str:
        """
        Gets the saon of this Address.
        The Secondary Addressable Object - this is usually something like a flat number or any other sub unit

        :return: The saon of this Address.
        :rtype: str
        """
        return self._saon

    @saon.setter
    def saon(self, saon: str):
        """
        Sets the saon of this Address.
        The Secondary Addressable Object - this is usually something like a flat number or any other sub unit

        :param saon: The saon of this Address.
        :type saon: str
        """

        self._saon = saon

    @property
    def paon(self) -> str:
        """
        Gets the paon of this Address.
        The Primary Addressable Object - this is usually a house number or a building name

        :return: The paon of this Address.
        :rtype: str
        """
        return self._paon

    @paon.setter
    def paon(self, paon: str):
        """
        Sets the paon of this Address.
        The Primary Addressable Object - this is usually a house number or a building name

        :param paon: The paon of this Address.
        :type paon: str
        """

        self._paon = paon

    @property
    def street(self) -> str:
        """
        Gets the street of this Address.
        The street where the building office resides

        :return: The street of this Address.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street: str):
        """
        Sets the street of this Address.
        The street where the building office resides

        :param street: The street of this Address.
        :type street: str
        """

        self._street = street

    @property
    def locality(self) -> str:
        """
        Gets the locality of this Address.
        Sometimes, an address is associated with a locality, which identifies the address with a smaller geographical area than the Post Town (see town)

        :return: The locality of this Address.
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality: str):
        """
        Sets the locality of this Address.
        Sometimes, an address is associated with a locality, which identifies the address with a smaller geographical area than the Post Town (see town)

        :param locality: The locality of this Address.
        :type locality: str
        """

        self._locality = locality

    @property
    def town(self) -> str:
        """
        Gets the town of this Address.
        This is the Post Town where the address is located. This usually corresponds to the sorting office that handles the mail for the address, as may take in many smaller towns, urban districts and villages (see locality).

        :return: The town of this Address.
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town: str):
        """
        Sets the town of this Address.
        This is the Post Town where the address is located. This usually corresponds to the sorting office that handles the mail for the address, as may take in many smaller towns, urban districts and villages (see locality).

        :param town: The town of this Address.
        :type town: str
        """

        self._town = town

    @property
    def postcode(self) -> str:
        """
        Gets the postcode of this Address.
        This is the Postcode for the address. Currently a postcode is needed for Sorting Office to begin parsing the address.

        :return: The postcode of this Address.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode: str):
        """
        Sets the postcode of this Address.
        This is the Postcode for the address. Currently a postcode is needed for Sorting Office to begin parsing the address.

        :param postcode: The postcode of this Address.
        :type postcode: str
        """

        self._postcode = postcode

