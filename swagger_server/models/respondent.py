# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Respondent(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, email_address: str=None, first_name: str=None, last_name: str=None, telephone: str=None, status: str=None):
        """
        Respondent - a model defined in Swagger

        :param id: The id of this Respondent.
        :type id: str
        :param email_address: The email_address of this Respondent.
        :type email_address: str
        :param first_name: The first_name of this Respondent.
        :type first_name: str
        :param last_name: The last_name of this Respondent.
        :type last_name: str
        :param telephone: The telephone of this Respondent.
        :type telephone: str
        :param status: The status of this Respondent.
        :type status: str
        """
        self.swagger_types = {
            'id': str,
            'email_address': str,
            'first_name': str,
            'last_name': str,
            'telephone': str,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'email_address': 'emailAddress',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'telephone': 'telephone',
            'status': 'status'
        }

        self._id = id
        self._email_address = email_address
        self._first_name = first_name
        self._last_name = last_name
        self._telephone = telephone
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Respondent':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The respondent of this Respondent.
        :rtype: Respondent
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this Respondent.

        :return: The id of this Respondent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this Respondent.

        :param id: The id of this Respondent.
        :type id: str
        """

        self._id = id

    @property
    def email_address(self) -> str:
        """
        Gets the email_address of this Respondent.

        :return: The email_address of this Respondent.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address: str):
        """
        Sets the email_address of this Respondent.

        :param email_address: The email_address of this Respondent.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def first_name(self) -> str:
        """
        Gets the first_name of this Respondent.

        :return: The first_name of this Respondent.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """
        Sets the first_name of this Respondent.

        :param first_name: The first_name of this Respondent.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """
        Gets the last_name of this Respondent.

        :return: The last_name of this Respondent.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """
        Sets the last_name of this Respondent.

        :param last_name: The last_name of this Respondent.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def telephone(self) -> str:
        """
        Gets the telephone of this Respondent.

        :return: The telephone of this Respondent.
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone: str):
        """
        Sets the telephone of this Respondent.

        :param telephone: The telephone of this Respondent.
        :type telephone: str
        """

        self._telephone = telephone

    @property
    def status(self) -> str:
        """
        Gets the status of this Respondent.

        :return: The status of this Respondent.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """
        Sets the status of this Respondent.

        :param status: The status of this Respondent.
        :type status: str
        """
        allowed_values = ["CREATED", "ACTIVE", "SUSPENDED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

