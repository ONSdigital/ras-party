# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.enrolment import Enrolment
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class BusinessAssociation(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, effective_from: datetime=None, effective_to: datetime=None, business_id: str=None, respondent_id: str=None, status: str=None, enrolments: List[Enrolment]=None):
        """
        BusinessAssociation - a model defined in Swagger

        :param effective_from: The effective_from of this BusinessAssociation.
        :type effective_from: datetime
        :param effective_to: The effective_to of this BusinessAssociation.
        :type effective_to: datetime
        :param business_id: The business_id of this BusinessAssociation.
        :type business_id: str
        :param respondent_id: The respondent_id of this BusinessAssociation.
        :type respondent_id: str
        :param status: The status of this BusinessAssociation.
        :type status: str
        :param enrolments: The enrolments of this BusinessAssociation.
        :type enrolments: List[Enrolment]
        """
        self.swagger_types = {
            'effective_from': datetime,
            'effective_to': datetime,
            'business_id': str,
            'respondent_id': str,
            'status': str,
            'enrolments': List[Enrolment]
        }

        self.attribute_map = {
            'effective_from': 'effectiveFrom',
            'effective_to': 'effectiveTo',
            'business_id': 'businessId',
            'respondent_id': 'respondentId',
            'status': 'status',
            'enrolments': 'enrolments'
        }

        self._effective_from = effective_from
        self._effective_to = effective_to
        self._business_id = business_id
        self._respondent_id = respondent_id
        self._status = status
        self._enrolments = enrolments

    @classmethod
    def from_dict(cls, dikt) -> 'BusinessAssociation':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The businessAssociation of this BusinessAssociation.
        :rtype: BusinessAssociation
        """
        return deserialize_model(dikt, cls)

    @property
    def effective_from(self) -> datetime:
        """
        Gets the effective_from of this BusinessAssociation.

        :return: The effective_from of this BusinessAssociation.
        :rtype: datetime
        """
        return self._effective_from

    @effective_from.setter
    def effective_from(self, effective_from: datetime):
        """
        Sets the effective_from of this BusinessAssociation.

        :param effective_from: The effective_from of this BusinessAssociation.
        :type effective_from: datetime
        """

        self._effective_from = effective_from

    @property
    def effective_to(self) -> datetime:
        """
        Gets the effective_to of this BusinessAssociation.

        :return: The effective_to of this BusinessAssociation.
        :rtype: datetime
        """
        return self._effective_to

    @effective_to.setter
    def effective_to(self, effective_to: datetime):
        """
        Sets the effective_to of this BusinessAssociation.

        :param effective_to: The effective_to of this BusinessAssociation.
        :type effective_to: datetime
        """

        self._effective_to = effective_to

    @property
    def business_id(self) -> str:
        """
        Gets the business_id of this BusinessAssociation.

        :return: The business_id of this BusinessAssociation.
        :rtype: str
        """
        return self._business_id

    @business_id.setter
    def business_id(self, business_id: str):
        """
        Sets the business_id of this BusinessAssociation.

        :param business_id: The business_id of this BusinessAssociation.
        :type business_id: str
        """

        self._business_id = business_id

    @property
    def respondent_id(self) -> str:
        """
        Gets the respondent_id of this BusinessAssociation.

        :return: The respondent_id of this BusinessAssociation.
        :rtype: str
        """
        return self._respondent_id

    @respondent_id.setter
    def respondent_id(self, respondent_id: str):
        """
        Sets the respondent_id of this BusinessAssociation.

        :param respondent_id: The respondent_id of this BusinessAssociation.
        :type respondent_id: str
        """

        self._respondent_id = respondent_id

    @property
    def status(self) -> str:
        """
        Gets the status of this BusinessAssociation.

        :return: The status of this BusinessAssociation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """
        Sets the status of this BusinessAssociation.

        :param status: The status of this BusinessAssociation.
        :type status: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "SUSPENDED", "ENDED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def enrolments(self) -> List[Enrolment]:
        """
        Gets the enrolments of this BusinessAssociation.

        :return: The enrolments of this BusinessAssociation.
        :rtype: List[Enrolment]
        """
        return self._enrolments

    @enrolments.setter
    def enrolments(self, enrolments: List[Enrolment]):
        """
        Sets the enrolments of this BusinessAssociation.

        :param enrolments: The enrolments of this BusinessAssociation.
        :type enrolments: List[Enrolment]
        """

        self._enrolments = enrolments

