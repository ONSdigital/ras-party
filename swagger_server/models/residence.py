# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Residence(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, uprn: int=None, category: str=None, type: str=None, estab_type: str=None, address_line1: str=None, address_line2: str=None, town_name: str=None, postcode: str=None, output_area: str=None, lsoa_area: str=None, msoa_area: str=None, lad_code: str=None, region_code: str=None, eastings: int=None, northings: int=None, htc: int=None, latitude: float=None, longitude: float=None):
        """
        Residence - a model defined in Swagger

        :param uprn: The uprn of this Residence.
        :type uprn: int
        :param category: The category of this Residence.
        :type category: str
        :param type: The type of this Residence.
        :type type: str
        :param estab_type: The estab_type of this Residence.
        :type estab_type: str
        :param address_line1: The address_line1 of this Residence.
        :type address_line1: str
        :param address_line2: The address_line2 of this Residence.
        :type address_line2: str
        :param town_name: The town_name of this Residence.
        :type town_name: str
        :param postcode: The postcode of this Residence.
        :type postcode: str
        :param output_area: The output_area of this Residence.
        :type output_area: str
        :param lsoa_area: The lsoa_area of this Residence.
        :type lsoa_area: str
        :param msoa_area: The msoa_area of this Residence.
        :type msoa_area: str
        :param lad_code: The lad_code of this Residence.
        :type lad_code: str
        :param region_code: The region_code of this Residence.
        :type region_code: str
        :param eastings: The eastings of this Residence.
        :type eastings: int
        :param northings: The northings of this Residence.
        :type northings: int
        :param htc: The htc of this Residence.
        :type htc: int
        :param latitude: The latitude of this Residence.
        :type latitude: float
        :param longitude: The longitude of this Residence.
        :type longitude: float
        """
        self.swagger_types = {
            'uprn': int,
            'category': str,
            'type': str,
            'estab_type': str,
            'address_line1': str,
            'address_line2': str,
            'town_name': str,
            'postcode': str,
            'output_area': str,
            'lsoa_area': str,
            'msoa_area': str,
            'lad_code': str,
            'region_code': str,
            'eastings': int,
            'northings': int,
            'htc': int,
            'latitude': float,
            'longitude': float
        }

        self.attribute_map = {
            'uprn': 'uprn',
            'category': 'category',
            'type': 'type',
            'estab_type': 'estabType',
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'town_name': 'townName',
            'postcode': 'postcode',
            'output_area': 'outputArea',
            'lsoa_area': 'lsoaArea',
            'msoa_area': 'msoaArea',
            'lad_code': 'ladCode',
            'region_code': 'regionCode',
            'eastings': 'eastings',
            'northings': 'northings',
            'htc': 'htc',
            'latitude': 'latitude',
            'longitude': 'longitude'
        }

        self._uprn = uprn
        self._category = category
        self._type = type
        self._estab_type = estab_type
        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._town_name = town_name
        self._postcode = postcode
        self._output_area = output_area
        self._lsoa_area = lsoa_area
        self._msoa_area = msoa_area
        self._lad_code = lad_code
        self._region_code = region_code
        self._eastings = eastings
        self._northings = northings
        self._htc = htc
        self._latitude = latitude
        self._longitude = longitude

    @classmethod
    def from_dict(cls, dikt) -> 'Residence':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The residence of this Residence.
        :rtype: Residence
        """
        return deserialize_model(dikt, cls)

    @property
    def uprn(self) -> int:
        """
        Gets the uprn of this Residence.
        Unique Property Reference Number.

        :return: The uprn of this Residence.
        :rtype: int
        """
        return self._uprn

    @uprn.setter
    def uprn(self, uprn: int):
        """
        Sets the uprn of this Residence.
        Unique Property Reference Number.

        :param uprn: The uprn of this Residence.
        :type uprn: int
        """

        self._uprn = uprn

    @property
    def category(self) -> str:
        """
        Gets the category of this Residence.
        only if care home or hotel

        :return: The category of this Residence.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """
        Sets the category of this Residence.
        only if care home or hotel

        :param category: The category of this Residence.
        :type category: str
        """
        allowed_values = ["HOTEL", "CARE HOME"]
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def type(self) -> str:
        """
        Gets the type of this Residence.
        Address type CE, HH, I.

        :return: The type of this Residence.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """
        Sets the type of this Residence.
        Address type CE, HH, I.

        :param type: The type of this Residence.
        :type type: str
        """

        self._type = type

    @property
    def estab_type(self) -> str:
        """
        Gets the estab_type of this Residence.
        Communal Establishment type.

        :return: The estab_type of this Residence.
        :rtype: str
        """
        return self._estab_type

    @estab_type.setter
    def estab_type(self, estab_type: str):
        """
        Sets the estab_type of this Residence.
        Communal Establishment type.

        :param estab_type: The estab_type of this Residence.
        :type estab_type: str
        """

        self._estab_type = estab_type

    @property
    def address_line1(self) -> str:
        """
        Gets the address_line1 of this Residence.
        Address details.

        :return: The address_line1 of this Residence.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1: str):
        """
        Sets the address_line1 of this Residence.
        Address details.

        :param address_line1: The address_line1 of this Residence.
        :type address_line1: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self) -> str:
        """
        Gets the address_line2 of this Residence.
        Address details.

        :return: The address_line2 of this Residence.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2: str):
        """
        Sets the address_line2 of this Residence.
        Address details.

        :param address_line2: The address_line2 of this Residence.
        :type address_line2: str
        """

        self._address_line2 = address_line2

    @property
    def town_name(self) -> str:
        """
        Gets the town_name of this Residence.
        Postal town name.

        :return: The town_name of this Residence.
        :rtype: str
        """
        return self._town_name

    @town_name.setter
    def town_name(self, town_name: str):
        """
        Sets the town_name of this Residence.
        Postal town name.

        :param town_name: The town_name of this Residence.
        :type town_name: str
        """

        self._town_name = town_name

    @property
    def postcode(self) -> str:
        """
        Gets the postcode of this Residence.
        Postal Code.

        :return: The postcode of this Residence.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode: str):
        """
        Sets the postcode of this Residence.
        Postal Code.

        :param postcode: The postcode of this Residence.
        :type postcode: str
        """

        self._postcode = postcode

    @property
    def output_area(self) -> str:
        """
        Gets the output_area of this Residence.
        Geography Output Area code.

        :return: The output_area of this Residence.
        :rtype: str
        """
        return self._output_area

    @output_area.setter
    def output_area(self, output_area: str):
        """
        Sets the output_area of this Residence.
        Geography Output Area code.

        :param output_area: The output_area of this Residence.
        :type output_area: str
        """

        self._output_area = output_area

    @property
    def lsoa_area(self) -> str:
        """
        Gets the lsoa_area of this Residence.
        Lower Layer Super Output Area code.

        :return: The lsoa_area of this Residence.
        :rtype: str
        """
        return self._lsoa_area

    @lsoa_area.setter
    def lsoa_area(self, lsoa_area: str):
        """
        Sets the lsoa_area of this Residence.
        Lower Layer Super Output Area code.

        :param lsoa_area: The lsoa_area of this Residence.
        :type lsoa_area: str
        """

        self._lsoa_area = lsoa_area

    @property
    def msoa_area(self) -> str:
        """
        Gets the msoa_area of this Residence.
        Middle layer Super Output Area code.

        :return: The msoa_area of this Residence.
        :rtype: str
        """
        return self._msoa_area

    @msoa_area.setter
    def msoa_area(self, msoa_area: str):
        """
        Sets the msoa_area of this Residence.
        Middle layer Super Output Area code.

        :param msoa_area: The msoa_area of this Residence.
        :type msoa_area: str
        """

        self._msoa_area = msoa_area

    @property
    def lad_code(self) -> str:
        """
        Gets the lad_code of this Residence.
        GSS nine character LAD code.

        :return: The lad_code of this Residence.
        :rtype: str
        """
        return self._lad_code

    @lad_code.setter
    def lad_code(self, lad_code: str):
        """
        Sets the lad_code of this Residence.
        GSS nine character LAD code.

        :param lad_code: The lad_code of this Residence.
        :type lad_code: str
        """

        self._lad_code = lad_code

    @property
    def region_code(self) -> str:
        """
        Gets the region_code of this Residence.
        GSS nine character Region geography code.

        :return: The region_code of this Residence.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code: str):
        """
        Sets the region_code of this Residence.
        GSS nine character Region geography code.

        :param region_code: The region_code of this Residence.
        :type region_code: str
        """

        self._region_code = region_code

    @property
    def eastings(self) -> int:
        """
        Gets the eastings of this Residence.
        Easting or x-coordinate.

        :return: The eastings of this Residence.
        :rtype: int
        """
        return self._eastings

    @eastings.setter
    def eastings(self, eastings: int):
        """
        Sets the eastings of this Residence.
        Easting or x-coordinate.

        :param eastings: The eastings of this Residence.
        :type eastings: int
        """

        self._eastings = eastings

    @property
    def northings(self) -> int:
        """
        Gets the northings of this Residence.
        Northing or y-coordinate.

        :return: The northings of this Residence.
        :rtype: int
        """
        return self._northings

    @northings.setter
    def northings(self, northings: int):
        """
        Sets the northings of this Residence.
        Northing or y-coordinate.

        :param northings: The northings of this Residence.
        :type northings: int
        """

        self._northings = northings

    @property
    def htc(self) -> int:
        """
        Gets the htc of this Residence.
        Hard to count code.

        :return: The htc of this Residence.
        :rtype: int
        """
        return self._htc

    @htc.setter
    def htc(self, htc: int):
        """
        Sets the htc of this Residence.
        Hard to count code.

        :param htc: The htc of this Residence.
        :type htc: int
        """

        self._htc = htc

    @property
    def latitude(self) -> float:
        """
        Gets the latitude of this Residence.
        Position North or South of Equator.

        :return: The latitude of this Residence.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """
        Sets the latitude of this Residence.
        Position North or South of Equator.

        :param latitude: The latitude of this Residence.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self) -> float:
        """
        Gets the longitude of this Residence.
        Position East or West of Greenwich Meridian.

        :return: The longitude of this Residence.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """
        Sets the longitude of this Residence.
        Position East or West of Greenwich Meridian.

        :param longitude: The longitude of this Residence.
        :type longitude: float
        """

        self._longitude = longitude

