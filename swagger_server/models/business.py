# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.address import Address
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Business(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, address: Address=None, contact_name: str=None, employee_count: int=None, enterprise_name: str=None, facsimile: str=None, fulltime_count: int=None, legal_status: str=None, name: str=None, business_ref: str=None, sic2003: str=None, sic2007: str=None, telephone: str=None, trading_name: str=None, turnover: int=None):
        """
        Business - a model defined in Swagger

        :param id: The id of this Business.
        :type id: str
        :param address: The address of this Business.
        :type address: Address
        :param contact_name: The contact_name of this Business.
        :type contact_name: str
        :param employee_count: The employee_count of this Business.
        :type employee_count: int
        :param enterprise_name: The enterprise_name of this Business.
        :type enterprise_name: str
        :param facsimile: The facsimile of this Business.
        :type facsimile: str
        :param fulltime_count: The fulltime_count of this Business.
        :type fulltime_count: int
        :param legal_status: The legal_status of this Business.
        :type legal_status: str
        :param name: The name of this Business.
        :type name: str
        :param business_ref: The business_ref of this Business.
        :type business_ref: str
        :param sic2003: The sic2003 of this Business.
        :type sic2003: str
        :param sic2007: The sic2007 of this Business.
        :type sic2007: str
        :param telephone: The telephone of this Business.
        :type telephone: str
        :param trading_name: The trading_name of this Business.
        :type trading_name: str
        :param turnover: The turnover of this Business.
        :type turnover: int
        """
        self.swagger_types = {
            'id': str,
            'address': Address,
            'contact_name': str,
            'employee_count': int,
            'enterprise_name': str,
            'facsimile': str,
            'fulltime_count': int,
            'legal_status': str,
            'name': str,
            'business_ref': str,
            'sic2003': str,
            'sic2007': str,
            'telephone': str,
            'trading_name': str,
            'turnover': int
        }

        self.attribute_map = {
            'id': 'id',
            'address': 'address',
            'contact_name': 'contactName',
            'employee_count': 'employeeCount',
            'enterprise_name': 'enterpriseName',
            'facsimile': 'facsimile',
            'fulltime_count': 'fulltimeCount',
            'legal_status': 'legalStatus',
            'name': 'name',
            'business_ref': 'businessRef',
            'sic2003': 'sic2003',
            'sic2007': 'sic2007',
            'telephone': 'telephone',
            'trading_name': 'tradingName',
            'turnover': 'turnover'
        }

        self._id = id
        self._address = address
        self._contact_name = contact_name
        self._employee_count = employee_count
        self._enterprise_name = enterprise_name
        self._facsimile = facsimile
        self._fulltime_count = fulltime_count
        self._legal_status = legal_status
        self._name = name
        self._business_ref = business_ref
        self._sic2003 = sic2003
        self._sic2007 = sic2007
        self._telephone = telephone
        self._trading_name = trading_name
        self._turnover = turnover

    @classmethod
    def from_dict(cls, dikt) -> 'Business':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The business of this Business.
        :rtype: Business
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this Business.

        :return: The id of this Business.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this Business.

        :param id: The id of this Business.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def address(self) -> Address:
        """
        Gets the address of this Business.

        :return: The address of this Business.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address: Address):
        """
        Sets the address of this Business.

        :param address: The address of this Business.
        :type address: Address
        """

        self._address = address

    @property
    def contact_name(self) -> str:
        """
        Gets the contact_name of this Business.

        :return: The contact_name of this Business.
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name: str):
        """
        Sets the contact_name of this Business.

        :param contact_name: The contact_name of this Business.
        :type contact_name: str
        """

        self._contact_name = contact_name

    @property
    def employee_count(self) -> int:
        """
        Gets the employee_count of this Business.

        :return: The employee_count of this Business.
        :rtype: int
        """
        return self._employee_count

    @employee_count.setter
    def employee_count(self, employee_count: int):
        """
        Sets the employee_count of this Business.

        :param employee_count: The employee_count of this Business.
        :type employee_count: int
        """

        self._employee_count = employee_count

    @property
    def enterprise_name(self) -> str:
        """
        Gets the enterprise_name of this Business.

        :return: The enterprise_name of this Business.
        :rtype: str
        """
        return self._enterprise_name

    @enterprise_name.setter
    def enterprise_name(self, enterprise_name: str):
        """
        Sets the enterprise_name of this Business.

        :param enterprise_name: The enterprise_name of this Business.
        :type enterprise_name: str
        """

        self._enterprise_name = enterprise_name

    @property
    def facsimile(self) -> str:
        """
        Gets the facsimile of this Business.

        :return: The facsimile of this Business.
        :rtype: str
        """
        return self._facsimile

    @facsimile.setter
    def facsimile(self, facsimile: str):
        """
        Sets the facsimile of this Business.

        :param facsimile: The facsimile of this Business.
        :type facsimile: str
        """

        self._facsimile = facsimile

    @property
    def fulltime_count(self) -> int:
        """
        Gets the fulltime_count of this Business.

        :return: The fulltime_count of this Business.
        :rtype: int
        """
        return self._fulltime_count

    @fulltime_count.setter
    def fulltime_count(self, fulltime_count: int):
        """
        Sets the fulltime_count of this Business.

        :param fulltime_count: The fulltime_count of this Business.
        :type fulltime_count: int
        """

        self._fulltime_count = fulltime_count

    @property
    def legal_status(self) -> str:
        """
        Gets the legal_status of this Business.

        :return: The legal_status of this Business.
        :rtype: str
        """
        return self._legal_status

    @legal_status.setter
    def legal_status(self, legal_status: str):
        """
        Sets the legal_status of this Business.

        :param legal_status: The legal_status of this Business.
        :type legal_status: str
        """
        allowed_values = ["Community Interest Company (CIC)", "Charitable Incorporated Organisation (CIO)", "Industrial and provident society", "General partnership", "Limited liability partnership (LLP)", "Limited partnership (LP)", "Private Limited Company", "Public Limited Company", "Unlimited Company", "Sole proprietorship"]
        if legal_status not in allowed_values:
            raise ValueError(
                "Invalid value for `legal_status` ({0}), must be one of {1}"
                .format(legal_status, allowed_values)
            )

        self._legal_status = legal_status

    @property
    def name(self) -> str:
        """
        Gets the name of this Business.

        :return: The name of this Business.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Business.

        :param name: The name of this Business.
        :type name: str
        """

        self._name = name

    @property
    def business_ref(self) -> str:
        """
        Gets the business_ref of this Business.
        The unique business identifier recognised within ONS (previously referred to as the RU Ref).

        :return: The business_ref of this Business.
        :rtype: str
        """
        return self._business_ref

    @business_ref.setter
    def business_ref(self, business_ref: str):
        """
        Sets the business_ref of this Business.
        The unique business identifier recognised within ONS (previously referred to as the RU Ref).

        :param business_ref: The business_ref of this Business.
        :type business_ref: str
        """

        self._business_ref = business_ref

    @property
    def sic2003(self) -> str:
        """
        Gets the sic2003 of this Business.

        :return: The sic2003 of this Business.
        :rtype: str
        """
        return self._sic2003

    @sic2003.setter
    def sic2003(self, sic2003: str):
        """
        Sets the sic2003 of this Business.

        :param sic2003: The sic2003 of this Business.
        :type sic2003: str
        """

        self._sic2003 = sic2003

    @property
    def sic2007(self) -> str:
        """
        Gets the sic2007 of this Business.

        :return: The sic2007 of this Business.
        :rtype: str
        """
        return self._sic2007

    @sic2007.setter
    def sic2007(self, sic2007: str):
        """
        Sets the sic2007 of this Business.

        :param sic2007: The sic2007 of this Business.
        :type sic2007: str
        """

        self._sic2007 = sic2007

    @property
    def telephone(self) -> str:
        """
        Gets the telephone of this Business.

        :return: The telephone of this Business.
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone: str):
        """
        Sets the telephone of this Business.

        :param telephone: The telephone of this Business.
        :type telephone: str
        """

        self._telephone = telephone

    @property
    def trading_name(self) -> str:
        """
        Gets the trading_name of this Business.

        :return: The trading_name of this Business.
        :rtype: str
        """
        return self._trading_name

    @trading_name.setter
    def trading_name(self, trading_name: str):
        """
        Sets the trading_name of this Business.

        :param trading_name: The trading_name of this Business.
        :type trading_name: str
        """

        self._trading_name = trading_name

    @property
    def turnover(self) -> int:
        """
        Gets the turnover of this Business.

        :return: The turnover of this Business.
        :rtype: int
        """
        return self._turnover

    @turnover.setter
    def turnover(self, turnover: int):
        """
        Sets the turnover of this Business.

        :param turnover: The turnover of this Business.
        :type turnover: int
        """

        self._turnover = turnover

